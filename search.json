[{"path":"https://bbuchsbaum.github.io/deflist/LICENSE.html","id":"gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"GNU LESSER GENERAL PUBLIC LICENSE","title":"NA","text":"Version 2.1, February 1999","code":"Copyright (C) 1991, 1999 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.  [This is the first released version of the Lesser GPL.  It also counts  as the successor of the GNU Library Public License, version 2, hence  the version number 2.1.]"},{"path":"https://bbuchsbaum.github.io/deflist/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"licenses software designed take away freedom share change . contrast, GNU General Public Licenses intended guarantee freedom share change free software–make sure software free users. license, Lesser General Public License, applies specially designated software packages–typically libraries–Free Software Foundation authors decide use . can use , suggest first think carefully whether license ordinary General Public License better strategy use particular case, based explanations . speak free software, referring freedom use, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish); receive source code can get want ; can change software use pieces new free programs; informed can things. protect rights, need make restrictions forbid distributors deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies library modify . example, distribute copies library, whether gratis fee, must give recipients rights gave . must make sure , , receive can get source code. link code library, must provide complete object files recipients, can relink library making changes library recompiling . must show terms know rights. protect rights two-step method: (1) copyright library, (2) offer license, gives legal permission copy, distribute /modify library. protect distributor, want make clear warranty free library. Also, library modified someone else passed , recipients know original version, original author’s reputation affected problems might introduced others. Finally, software patents pose constant threat existence free program. wish make sure company effectively restrict users free program obtaining restrictive license patent holder. Therefore, insist patent license obtained version library must consistent full freedom use specified license. GNU software, including libraries, covered ordinary GNU General Public License. license, GNU Lesser General Public License, applies certain designated libraries, quite different ordinary General Public License. use license certain libraries order permit linking libraries non-free programs. program linked library, whether statically using shared library, combination two legally speaking combined work, derivative original library. ordinary General Public License therefore permits linking entire combination fits criteria freedom. Lesser General Public License permits lax criteria linking code library. call license “Lesser” General Public License Less protect user’s freedom ordinary General Public License. also provides free software developers Less advantage competing non-free programs. disadvantages reason use ordinary General Public License many libraries. However, Lesser license provides advantages certain special circumstances. example, rare occasions, may special need encourage widest possible use certain library, becomes de-facto standard. achieve , non-free programs must allowed use library. frequent case free library job widely used non-free libraries. case, little gain limiting free library free software , use Lesser General Public License. cases, permission use particular library non-free programs enables greater number people use large body free software. example, permission use GNU C Library non-free programs enables many people use whole GNU operating system, well variant, GNU/Linux operating system. Although Lesser General Public License Less protective users’ freedom, ensure user program linked Library freedom wherewithal run program using modified version Library. precise terms conditions copying, distribution modification follow. Pay close attention difference “work based library” “work uses library”. former contains code derived library, whereas latter must combined library order run.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"NA","text":"0. License Agreement applies software library program contains notice placed copyright holder authorized party saying may distributed terms Lesser General Public License (also called “License”). licensee addressed “”. “library” means collection software functions /data prepared conveniently linked application programs (use functions data) form executables. “Library”, , refers software library work distributed terms. “work based Library” means either Library derivative work copyright law: say, work containing Library portion , either verbatim modifications /translated straightforwardly another language. (Hereinafter, translation included without limitation term “modification”.) “Source code” work means preferred form work making modifications . library, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation library. Activities copying, distribution modification covered License; outside scope. act running program using Library restricted, output program covered contents constitute work based Library (independent use Library tool writing ). Whether true depends Library program uses Library . 1. may copy distribute verbatim copies Library’s complete source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; distribute copy License along Library. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Library portion , thus forming work based Library, copy distribute modifications work terms Section 1 , provided also meet conditions: ) modified work must software library. b) must cause files modified carry prominent notices stating changed files date change. c) must cause whole work licensed charge third parties terms License. d) facility modified Library refers function table data supplied application program uses facility, argument passed facility invoked, must make good faith effort ensure , event application supply function table, facility still operates, performs whatever part purpose remains meaningful. (example, function library compute square roots purpose entirely well-defined independent application. Therefore, Subsection 2d requires application-supplied function table used function must optional: application supply , square root function must still compute square roots.) requirements apply modified work whole. identifiable sections work derived Library, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Library, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Library. addition, mere aggregation another work based Library Library (work based Library) volume storage distribution medium bring work scope License. 3. may opt apply terms ordinary GNU General Public License instead License given copy Library. , must alter notices refer License, refer ordinary GNU General Public License, version 2, instead License. (newer version version 2 ordinary GNU General Public License appeared, can specify version instead wish.) make change notices. change made given copy, irreversible copy, ordinary GNU General Public License applies subsequent copies derivative works made copy. option useful wish copy part code Library program library. 4. may copy distribute Library (portion derivative , Section 2) object code executable form terms Sections 1 2 provided accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange. distribution object code made offering access copy designated place, offering equivalent access copy source code place satisfies requirement distribute source code, even though third parties compelled copy source along object code. 5. program contains derivative portion Library, designed work Library compiled linked , called “work uses Library”. work, isolation, derivative work Library, therefore falls outside scope License. However, linking “work uses Library” Library creates executable derivative Library (contains portions Library), rather “work uses library”. executable therefore covered License. Section 6 states terms distribution executables. “work uses Library” uses material header file part Library, object code work may derivative work Library even though source code . Whether true especially significant work can linked without Library, work library. threshold true precisely defined law. object file uses numerical parameters, data structure layouts accessors, small macros small inline functions (ten lines less length), use object file unrestricted, regardless whether legally derivative work. (Executables containing object code plus portions Library still fall Section 6.) Otherwise, work derivative Library, may distribute object code work terms Section 6. executables containing work also fall Section 6, whether linked directly Library . 6. exception Sections , may also combine link “work uses Library” Library produce work containing portions Library, distribute work terms choice, provided terms permit modification work customer’s use reverse engineering debugging modifications. must give prominent notice copy work Library used Library use covered License. must supply copy License. work execution displays copyright notices, must include copyright notice Library among , well reference directing user copy License. Also, must one things: ) Accompany work complete corresponding machine-readable source code Library including whatever changes used work (must distributed Sections 1 2 ); , work executable linked Library, complete machine-readable “work uses Library”, object code /source code, user can modify Library relink produce modified executable containing modified Library. (understood user changes contents definitions files Library necessarily able recompile application use modified definitions.) b) Use suitable shared library mechanism linking Library. suitable mechanism one (1) uses run time copy library already present user’s computer system, rather copying library functions executable, (2) operate properly modified version library, user installs one, long modified version interface-compatible version work made . c) Accompany work written offer, valid least three years, give user materials specified Subsection 6a, , charge cost performing distribution. d) distribution work made offering access copy designated place, offer equivalent access copy specified materials place. e) Verify user already received copy materials already sent user copy. executable, required form “work uses Library” must include data utility programs needed reproducing executable . However, special exception, materials distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. may happen requirement contradicts license restrictions proprietary libraries normally accompany operating system. contradiction means use Library together executable distribute. 7. may place library facilities work based Library side--side single library together library facilities covered License, distribute combined library, provided separate distribution work based Library library facilities otherwise permitted, provided two things: ) Accompany combined library copy work based Library, uncombined library facilities. must distributed terms Sections . b) Give prominent notice combined library fact part work based Library, explaining find accompanying uncombined form work. 8. may copy, modify, sublicense, link , distribute Library except expressly provided License. attempt otherwise copy, modify, sublicense, link , distribute Library void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 9. required accept License, since signed . However, nothing else grants permission modify distribute Library derivative works. actions prohibited law accept License. Therefore, modifying distributing Library (work based Library), indicate acceptance License , terms conditions copying, distributing modifying Library works based . 10. time redistribute Library (work based Library), recipient automatically receives license original licensor copy, distribute, link modify Library subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 11. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Library . example, patent license permit royalty-free redistribution Library receive copies directly indirectly , way satisfy License refrain entirely distribution Library. portion section held invalid unenforceable particular circumstance, balance section intended apply, section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 12. distribution /use Library restricted certain countries either patents copyrighted interfaces, original copyright holder places Library License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 13. Free Software Foundation may publish revised /new versions Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Library specify license version number, may choose version ever published Free Software Foundation. 14. wish incorporate parts Library free programs whose distribution conditions incompatible , write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally. WARRANTY 15. LIBRARY LICENSED FREE CHARGE, WARRANTY LIBRARY, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE LIBRARY “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE LIBRARY . LIBRARY PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 16. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE LIBRARY PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE LIBRARY (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE LIBRARY OPERATE SOFTWARE), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/deflist/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-libraries","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Libraries","title":"NA","text":"develop new library, want greatest possible use public, recommend making free software everyone can redistribute change. can permitting redistribution terms (, alternatively, terms ordinary General Public License). apply terms, attach following notices library. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. also get employer (work programmer) school, , sign “copyright disclaimer” library, necessary. sample; alter names: ’s !","code":"one line to give the library's name and an idea of what it does. Copyright (C) year  name of author  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.  signature of Ty Coon, 1 April 1990 Ty Coon, President of Vice"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"deflist package provides read-list-like object retrieves elements function call. particularly useful handling large datasets elements computed -demand stored memory. vignette, provide overview main features deflist package demonstrate usage examples.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"creating-a-deferred-list","dir":"Articles","previous_headings":"","what":"Creating a deferred list","title":"Introduction","text":"create deferred list, use deflist function. key input function defines access elements list. deferred list can also configured memoise element access cache results faster retrieval. Let’s create simple deferred list square numbers:","code":"library(deflist)  square_fun <- function(i) i^2 square_deflist <- deflist(square_fun, len = 5) square_deflist #> deflist:  5  elements.  #> memoised:  FALSE"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"accessing-elements","dir":"Articles","previous_headings":"","what":"Accessing elements","title":"Introduction","text":"Elements deferred list can accessed using standard list indexing, either position name (names provided):","code":"# Access by index square_deflist[[1]] #> [1] 1 square_deflist[[2]] #> [1] 4  # Access multiple elements square_deflist[c(1, 3, 5)] #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 9 #>  #> [[3]] #> [1] 25"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"memoisation","dir":"Articles","previous_headings":"","what":"Memoisation","title":"Introduction","text":"Deferred lists can configured use memoisation, caches results function calls speed repeated access elements. enable memoisation, set memoise argument TRUE creating deferred list. can also specify cache type (“memory” “file”) cache directory file-based caching. ’s example memoisation enabled:","code":"memoised_square_fun <- deflist(square_fun, len = 5, memoise = TRUE, cache = \"memory\") memoised_square_fun #> deflist:  5  elements.  #> memoised:  TRUE  # Access an element multiple times system.time({ for (i in 1:1000) memoised_square_fun[[1]] }) #>    user  system elapsed  #>   0.104   0.020   0.124"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"converting-to-a-list","dir":"Articles","previous_headings":"","what":"Converting to a list","title":"Introduction","text":"deferred list can converted standard R list using .list method:","code":"square_list <- as.list(square_deflist) square_list #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 4 #>  #> [[3]] #> [1] 9 #>  #> [[4]] #> [1] 16 #>  #> [[5]] #> [1] 25"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"read-only-protection","dir":"Articles","previous_headings":"","what":"Read-only protection","title":"Introduction","text":"Deferred lists read-, meaning modify elements. Attempting result error:","code":"try(square_deflist[[1]] <- 0) #> Error in `[[<-`(`*tmp*`, 1, value = 0) :  #>   read only list, cannot set elements"},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use Cases","title":"Introduction","text":"potential use cases deflist include: Large datasets: working large datasets, loading entire dataset memory might feasible. using deflist, can compute retrieve elements needed, saving memory potentially speeding processing. Expensive computations: elements list expensive compute, deflist can used cache results, reducing time required recompute element multiple times. Dynamic content: cases content list may change time, deflist can used ensure --date information always retrieved element accessed. API calls: working APIs rate limits require significant processing time, deflist can used make API calls -demand, avoiding unnecessary calls reducing chance hitting rate limits. Lazy evaluation: situations need subset data elements list, deflist allows retrieve required elements, potentially speeding processing reducing memory usage.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"caveats","dir":"Articles","previous_headings":"","what":"Caveats","title":"Introduction","text":"deflist offers several advantages certain scenarios, potential dangers caveats aware using data structure: Memory management: Since deflist retrieves elements -demand, can help reduce memory usage certain scenarios. However, retrieved elements discarded usage, lead increased memory consumption time. essential manage memory carefully working deflist. Performance: deflist can improve performance cases entire dataset required caching beneficial, may introduce overhead accessing elements. overhead lead slower performance compared using standard list elements accessed frequently sequentially. Complexity: Using deflist introduces additional level complexity code, can make harder understand, maintain, debug. weigh benefits using deflist potential increase complexity deciding whether use . Error handling: function used retrieve elements deflist encounters error fails, need handle cases gracefully avoid breaking application. might require additional error handling exception handling code. Caching memoization: deflist used memoization, crucial consider implications caching results. cases, caching might desired, can lead stale outdated results. Additionally, using file-based caching, need ensure cache directory managed correctly, involve handling file /O errors, managing disk space, implementing cache eviction policies.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/articles/Introduction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction","text":"deflist package provides flexible way work large datasets require -demand computation. can easily integrated existing R workflows, making valuable tool wide range applications.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2023). deflist: Deferred List - Read-List-Like Object Deferred Access. R package version 0.1.0, https://bbuchsbaum.github.io/deflist/.","code":"@Manual{,   title = {deflist: Deferred List - A Read-Only List-Like Object with Deferred Access},   author = {Bradley Buchsbaum},   year = {2023},   note = {R package version 0.1.0},   url = {https://bbuchsbaum.github.io/deflist/}, }"},{"path":"https://bbuchsbaum.github.io/deflist/index.html","id":"deflist","dir":"","previous_headings":"","what":"Deferred List - A Read-Only List-Like Object with Deferred Access","title":"Deferred List - A Read-Only List-Like Object with Deferred Access","text":"goal deflist provide list-like object element access routed user-supplied function. can used, example, list-like syntax required one afford hold elements memory .","code":""},{"path":"https://bbuchsbaum.github.io/deflist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deferred List - A Read-Only List-Like Object with Deferred Access","text":"can install released version deflist CRAN : development version GitHub :","code":"install.packages(\"deflist\") # install.packages(\"devtools\") devtools::install_github(\"bbuchsbaum/deflist\")"},{"path":"https://bbuchsbaum.github.io/deflist/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Deferred List - A Read-Only List-Like Object with Deferred Access","text":"value index may change across calls, example: Memoisation can enabled values given index cached: addition, memoisation can set store cached values file system:","code":"library(deflist)  dl <- deflist(function(i) i, len=10) print(dl[[1]]) #> [1] 1  dl2 <- deflist(function(i) { Sys.sleep(5); i*2  }, len=10)  for (i in 1:10) {   print(dl2[[i]]) } #> [1] 2 #> [1] 4 #> [1] 6 #> [1] 8 #> [1] 10 #> [1] 12 #> [1] 14 #> [1] 16 #> [1] 18 #> [1] 20 dl3 <- deflist(function(i) { rnorm(1) }, len=10) print(dl3[[1]]) #> [1] -0.8829868 print(dl3[[1]]) #> [1] 0.2334838 dl4 <- deflist(function(i) { rnorm(1)  }, len=10, memoise=TRUE) print(dl4[[1]]) #> [1] 1.14986 print(dl4[[1]]) #> [1] 1.14986 dl5 <- deflist(function(i) { rnorm(1000)  }, len=10, memoise=TRUE, cache=\"file\", cachedir = tempdir()) print(dl5[[1]][1:10]) #>  [1]  1.0303269  1.6038363  0.6710913  0.4610752 -0.6212213 -0.2649585 #>  [7] -1.5652615 -0.6174861  0.2097225 -0.8096926 print(dl5[[1]][1:10]) #>  [1]  1.0303269  1.6038363  0.6710913  0.4610752 -0.6212213 -0.2649585 #>  [7] -1.5652615 -0.6174861  0.2097225 -0.8096926"},{"path":"https://bbuchsbaum.github.io/deflist/reference/as.list.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a deflist object to a list — as.list.deflist","title":"Convert a deflist object to a list — as.list.deflist","text":"Convert deflist object list","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/as.list.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a deflist object to a list — as.list.deflist","text":"","code":"# S3 method for deflist as.list(x, ...)"},{"path":"https://bbuchsbaum.github.io/deflist/reference/as.list.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a deflist object to a list — as.list.deflist","text":"x deflist object. ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/as.list.deflist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a deflist object to a list — as.list.deflist","text":"list containing elements deflist object.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deferred list — deflist","title":"Create a deferred list — deflist","text":"read-list retrieves elements function call. deferred list useful handling large datasets elements computed -demand.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deferred list — deflist","text":"","code":"deflist(   fun,   len = 1,   names,   memoise = FALSE,   cache = c(\"memory\", \"file\"),   cachedir = NULL )"},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a deferred list — deflist","text":"fun function used retrieve elements. len Integer, length list (default 1). names Character vector, optional set names, one per element. memoise Logical, whether memoise function speed repeated element access (default FALSE). cache Character, use -memory filesystem cache memoise TRUE (default \"memory\"). cachedir Character, file path cache (default NULL).","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deferred list — deflist","text":"object class \"deflist\" representing deferred list.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deferred list — deflist","text":"deferred list created using provided function, length, names, caching options. list read-, elements retrieved using provided function.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/deflist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deferred list — deflist","text":"","code":"# Create a deferred list of squares square_fun <- function(i) i^2 square_deflist <- deflist(square_fun, len = 5) print(square_deflist) #> deflist:  5  elements.  #> memoised:  FALSE  cat(\"First element of the list:\", square_deflist[[1]], \"\\n\") #> First element of the list: 1"},{"path":"https://bbuchsbaum.github.io/deflist/reference/length.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the length of a deflist object — length.deflist","title":"Retrieve the length of a deflist object — length.deflist","text":"Retrieve length deflist object","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/length.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the length of a deflist object — length.deflist","text":"","code":"# S3 method for deflist length(x)"},{"path":"https://bbuchsbaum.github.io/deflist/reference/length.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the length of a deflist object — length.deflist","text":"x deflist object.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/length.deflist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the length of a deflist object — length.deflist","text":"length deflist object.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a deflist object — [.deflist","title":"Subset a deflist object — [.deflist","text":"Subset deflist object","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a deflist object — [.deflist","text":"","code":"# S3 method for deflist [(x, i)"},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a deflist object — [.deflist","text":"x deflist object. Indices names elements retrieved.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-.deflist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a deflist object — [.deflist","text":"list containing elements specified indices names deflist object.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-sub-.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an element from a deflist object — [[.deflist","title":"Retrieve an element from a deflist object — [[.deflist","text":"Retrieve element deflist object","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-sub-.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an element from a deflist object — [[.deflist","text":"","code":"# S3 method for deflist [[(x, i)"},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-sub-.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an element from a deflist object — [[.deflist","text":"x deflist object. Index name element retrieved.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-sub-.deflist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve an element from a deflist object — [[.deflist","text":"element specified index name deflist object.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-subset-.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Prevent assignment to an element in a deflist object — [[<-.deflist","title":"Prevent assignment to an element in a deflist object — [[<-.deflist","text":"Prevent assignment element deflist object","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-subset-.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prevent assignment to an element in a deflist object — [[<-.deflist","text":"","code":"# S3 method for deflist [[(x, i) <- value"},{"path":"https://bbuchsbaum.github.io/deflist/reference/sub-subset-.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prevent assignment to an element in a deflist object — [[<-.deflist","text":"x deflist object. Index name element assigned. value Value assigned element.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/subset-.deflist.html","id":null,"dir":"Reference","previous_headings":"","what":"Prevent assignment to elements in a deflist object — [<-.deflist","title":"Prevent assignment to elements in a deflist object — [<-.deflist","text":"Prevent assignment elements deflist object","code":""},{"path":"https://bbuchsbaum.github.io/deflist/reference/subset-.deflist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prevent assignment to elements in a deflist object — [<-.deflist","text":"","code":"# S3 method for deflist [(x, i) <- value"},{"path":"https://bbuchsbaum.github.io/deflist/reference/subset-.deflist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prevent assignment to elements in a deflist object — [<-.deflist","text":"x deflist object. Indices names elements assigned. value Values assigned elements.","code":""},{"path":"https://bbuchsbaum.github.io/deflist/news/index.html","id":"deflist-010","dir":"Changelog","previous_headings":"","what":"deflist 0.1.0","title":"deflist 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
